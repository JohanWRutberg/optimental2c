generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)


  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  firstName     String
  lastName      String
  password      String
  email         String    @unique
  emailVerified DateTime?
  phone         String
  journal       String?
  image         String?
  role          Role      @default(USER)
  accounts      Account[]
  sessions      Session[]
  Booking       Booking[]
}

enum BookingState {
  IDLE
  PENDING
  CLOSED
}

model Booking {
  id         String       @id @default(cuid())
  userId     String
  user   User         @relation(fields: [userId], references: [id])
  creator    User[] @relation(name: "creator")
  customer User[] @relation(name: "customer")
  start_time DateTime
  end_time   DateTime
  bookable   BookingState @default(IDLE)
  updated_at DateTime @updatedAt
  created_at DateTime @default(now())
  
  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  USER
  ADMIN
}
